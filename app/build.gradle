apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'com.lib.annotation.gradle.plugin'

import com.lib.annotation.gradle.plugin.MainDexGenerator

android {
    compileSdkVersion android_compile_version
    buildToolsVersion android_buildtools_version

    dataBinding {
        enabled = true
    }
    defaultConfig {
        applicationId "com.kotlin.study"
        minSdkVersion min_sdk_version
        //targetSdkVersion 29时访问外部存储文件需要使用统一存储访问服务
        targetSdkVersion target_sdk_version
        versionCode version_code
        versionName version_name
        multiDexEnabled true
        externalNativeBuild {

            // For ndk-build, instead use ndkBuild {}
            cmake {

                // Passes optional arguments to CMake.
                arguments "-DANDROID_ARM_NEON=TRUE", "-DANDROID_TOOLCHAIN=clang"

                // Sets optional flags for the C compiler.
                cFlags "-D_EXAMPLE_C_FLAG1", "-D_EXAMPLE_C_FLAG2"

                // Sets a flag to enable format macro constants for the C++ compiler.
                cppFlags "-D__STDC_FORMAT_MACROS"
            }
        }

        // 不能删除，库中只有armabi，但是三方库中有abi全支持的，所以需要保留，保证生成的apk中只有armabi的so
        ndk {
            setAbiFilters abi_filter.asCollection()
        }
    }
    signingConfigs {
        myConfig {
            storeFile file("$rootDir/keystore.jks")
            storePassword "android"
            keyAlias "study"
            keyPassword "android"
            v2SigningEnabled false
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            multiDexKeepFile file('multidex-config.txt')
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.myConfig
            minifyEnabled true
            multiDexKeepFile file('multidex-config.txt')
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            manifest.srcFile "src/main/AndroidManifest.xml"
            jniLibs.srcDirs = ["src/main/libs"]
            java.srcDirs = ["src/main/java"]
        }
    }

    compileOptions {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }

    flavorDimensions "brand"
    productFlavors {
        picasso {

        }

        glide {

        }
    }
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.whenTaskAdded { task ->
    println "task : $task.name"
    if (task.name.contains('transformDexArchiveWithDexMergerFor')) {
        task.doFirst(new MainDexGenerator([
                'io/reactivex/annotations',
                'com/fasterxml',
                'rx',
                'org/jivesoftware',
                'org/jetbrains/',
                'org/intellij',
                'android/support/v4',
                'androidx',
                'okio',
                'javassist',
                'com/google/gson',
                'okhttp3'
                //....and other you think could work
        ]))
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "androidx.multidex:multidex:$multidex_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation "androidx.appcompat:appcompat:$androidx_core_version"
    implementation "androidx.recyclerview:recyclerview:$androidx_core_version"
    implementation "androidx.core:core-ktx:$core_ktx_version"
    implementation "androidx.constraintlayout:constraintlayout:$androidx_constraintlayout_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    implementation project(':lib_core')
    implementation project(':lib_database')
    implementation project(':lib_okhttp')
    implementation project(':lib_ffmpeg')
    implementation "com.google.code.gson:gson:$gson_version"
    implementation "android.arch.persistence.room:rxjava2:$rxjava2_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.lib.annotation:lib_annotation:$lib_annotation_version"
    implementation "org.javassist:javassist:$javassist_version"

//    implementation project(':flutter')
}
